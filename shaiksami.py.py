# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sSbZntAFBFr8DBD0OrHFh2FKq1MNMS2M
"""

import matplotlib.pyplot as plt

class PointLoad:
    def __init__(self, magnitude, position):
        self.magnitude = magnitude
        self.position = position

class Beam:
    def __init__(self, length):
        self.length = length
        self.loads = []

    def add_point_load(self, magnitude, position):
        self.loads.append(PointLoad(magnitude, position))

    def calculate_reactions(self):
        """Assume simply supported beam with supports at x=0 and x=L"""
        total_load = sum(load.magnitude for load in self.loads)
        moment_about_A = sum(load.magnitude * load.position for load in self.loads)
        Rb = moment_about_A / self.length
        Ra = total_load - Rb
        return Ra, Rb

    def shear_force_distribution(self, step=0.01):
        Ra, Rb = self.calculate_reactions()
        x_vals = []
        shear_vals = []
        shear = Ra
        current_load_index = 0

        for x in frange(0, self.length, step):

            while (current_load_index < len(self.loads) and
                   abs(x - self.loads[current_load_index].position) < step / 2):
                shear -= self.loads[current_load_index].magnitude
                current_load_index += 1

            x_vals.append(x)
            shear_vals.append(shear)

        return x_vals, shear_vals

def frange(start, stop, step):
    """Range function that supports float stepping"""
    while start <= stop:
        yield round(start, 5)
        start += step

def plot_shear_force(x, shear):
    plt.figure(figsize=(10, 4))
    plt.plot(x, shear, label='Shear Force', color='blue')
    plt.axhline(0, color='black', linewidth=0.8)
    plt.xlabel("Beam Length (m)")
    plt.ylabel("Shear Force (N)")
    plt.title("Shear Force Diagram")
    plt.grid(True)
    plt.legend()
    plt.show()
beam = Beam(length=10)
beam.add_point_load(500, 2)
beam.add_point_load(1000, 5)
beam.add_point_load(750, 7)

x_vals, shear_vals = beam.shear_force_distribution()
plot_shear_force(x_vals, shear_vals)